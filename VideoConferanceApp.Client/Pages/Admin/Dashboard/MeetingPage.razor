@page "/meeting/{MeetingId}"
@attribute [Authorize]
@using VideoConferanceApp.Shared.Meeting.Responses
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.FluentUI.AspNetCore.Components
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons
@using NetcodeHub.Packages.Components.Modal
@using NetcodeHub.Packages.Components.ScreenLoader
@layout DashboardLayout
@implements IAsyncDisposable

<div class="row" style="opacity:@PageOpacity">
    <div class="co-lg-12 card border-0">
        <div class="card-body video-conference-container" id="@ContainerId"></div>
        <div class="card-footer d-flex justify-content-between">
            <button class="btn btn-danger" @onclick="CloseMeeting">Close Meeting</button>
            <FluentMenuButton IconStart="new Icons.Regular.Size16.ConferenceRoom()"
                              ButtonAppearance="@Appearance.Neutral"
                              Text="Participants"
                              Items="@ConnectedUser.ToDictionary()" />

            @if (IsMicOn)
            {
                <div class="hstack gap-1">
                    <FluentIcon Value="@(new Icons.Filled.Size20.Mic())"
                    OnClick="ManageMic"
                    Style="cursor:pointer" />
                    <span>On</span>
                </div>

            }
            else
            {
                <div class="hstack gap-1">
                    <FluentIcon Value="@(new Icons.Regular.Size20.SpeakerMute())"
                    OnClick="ManageMic"
                    Style="cursor:pointer" />
                    <span>Off</span>
                </div>
            }
        </div>
    </div>
</div>
<NetcodeHubScreenLoader Show="@ShowLoader" />
<NetcodeHubModal @bind-Open="IsMessageModalOpen"
                 BootstrapClass="border-info rounded p-2 ml-2 mr-2"
                 CustomStyle="min-width:400px; max-width:500px;">
    <ContentTemplate>
        <div class="card">
            <div class="card-header">Notification!</div>
            <div class="card-body">
                <div class="alert alert-info text-center">@Message</div>
                <button class="btn btn-info" @onclick="Ok">Ok</button>
            </div>
        </div>
    </ContentTemplate>
</NetcodeHubModal>
<FluentMenuProvider />
@code {
    private HubConnection? _hubConnection;
    static bool IsMicOn = true;
    int PageOpacity = 0;
    bool ShowLoader = false;
    bool IsMessageModalOpen = false;
    string Message = string.Empty;
    string ContainerId = "host-video-container";
    [Parameter] public string MeetingId { get; set; } = string.Empty;
    [CascadingParameter] Task<AuthenticationState>? AuthState { get; set; }
    OrderedDictionary<string, string> ConnectedUser = new();
    protected override void OnParametersSet()
    {

        if (string.IsNullOrEmpty(MeetingId))
            NavManager.NavigateTo("/dashboard");
    }

    protected async override Task OnInitializedAsync()
    {
        ShowLoader = true;
        // get username from auth state
        var user = (await AuthState!).User;
        string name = user.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.Name)!.Value;

        string key = config["Token:Key"]!;
        if (key == null)
        {
            DisplayMessage("Invalid token key provided");
            return;
        }

        string combinedToken = await localStorageService.GetItemAsStringAsync(key);
        if (combinedToken == null)
        {
            DisplayMessage("Invalid token provided");
            return;
        }

        string jwtToken = combinedToken.Split('|')[0];
        if (jwtToken == null)
        {
            DisplayMessage("Invalid token provided");
            return;
        }

        // connect to the Hub & pass the token to the websocket
        string baseAddress = config["Server:BaseAddress"]!;
        _hubConnection = new HubConnectionBuilder()
                .WithUrl($"{baseAddress}/meetinghub", option =>
            {
                option.AccessTokenProvider = () => Task.FromResult(jwtToken)!;
            }).WithAutomaticReconnect().Build();


        _hubConnection.On("GetConnectedUsers", async () =>
        {
       Console.WriteLine("Get Connected User Event fired");
       GetMeetingMembersResponse? result =
       await meetingService.GetConnectedMembers(MeetingId);

       // check if opertion was successfull
       Console.WriteLine(result!.Message);
       if (!result.IsSuccess)
       {
           ConnectedUser = new();
           return;
       }

       int index = 1;
       foreach (var user in result.Data!)
       {
           ConnectedUser.Add(index.ToString(), user);
           index++;
       }
       await InvokeAsync(StateHasChanged);
        });


        //Notfiy self when closes meeting
        _hubConnection.On("MeetingClosed", () =>
        {
            Console.WriteLine("Meeting Closed Event fired");
            NavManager.NavigateTo("/dashboard");
        });

        if (_hubConnection.State == HubConnectionState.Disconnected)
            await _hubConnection.StartAsync();


        // get meeting token
        TwilioServiceResponse? response = await twilioService.GenerateMeetingToken(name, MeetingId)!;
        if (!response!.IsSuccess)
        {
            DisplayMessage(response.Message!);
            return;
        }


        //Initialize meeting to keep the meeting active
        if (_hubConnection.State == HubConnectionState.Connected)
        {
            try
            {
                await _hubConnection.SendAsync("InitializeMeeting", MeetingId);
            }
            catch (Exception ex)
            {
                DisplayMessage(ex.Message);
                return;
            }
        }

        // Start twilio meeting
        await twilioService
        .JoinMeeting(token: response.Data!, roomName: MeetingId, containerId: ContainerId);
        ShowLoader = false;
        PageOpacity = 1;
    }

    private void DisplayMessage(string message)
    {
        // display mesage if error occured
        Message = message;
        IsMessageModalOpen = true;
        ShowLoader = false;
        StateHasChanged();
    }

    void Ok()
    {
        IsMessageModalOpen = false;
    }

    async Task ManageMic()
    {
        await twilioService.ToggleMic();
        IsMicOn = !IsMicOn;
    }

    async Task CloseMeeting()
    {
        ShowLoader = true;
        _ = await meetingService.ClearMeeting(MeetingId);
        await twilioService.CloseMeeting(MeetingId);
        await twilioService.LeaveMeeting(ContainerId);
        await Task.Delay(500);
        NavManager.NavigateTo("/dashboard");
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();
        }
    }
}